import pyautogui
import time
import subprocess

# # Enable failsafe - move mouse to top-left corner to abort
# pyautogui.FAILSAFE = True

# # Open MuMu_Installer.exe without blocking
# print("Opening MuMu_Installer.exe...")
# subprocess.Popen("MuMu_Installer.exe")

# # Wait 3 seconds for the installer to load
# print("Waiting 3 seconds for installer to load...")
# time.sleep(3)

# # Look for the install.png image on screen
# print("Searching for install.png on screen...")
# install_location = pyautogui.locateOnScreen('install.png', confidence=0.8)
# install_center = pyautogui.center(install_location)
# print(f"Found install.png at: {install_location}")
# print(f"Clicking at center: X: {install_center.x}, Y: {install_center.y}")
# pyautogui.click(install_center)
# print("Successfully clicked the install button!")

# # Wait for installation to complete
# print("Waiting for installation to complete...")
# time.sleep(5)

# # Click option.png
# print("Searching for option.png on screen...")
# option_location = pyautogui.locateOnScreen('option.png', confidence=0.8)
# option_center = pyautogui.center(option_location)
# print(f"Found option.png at: {option_location}")
# print(f"Clicking at center: X: {option_center.x}, Y: {option_center.y}")
# pyautogui.click(option_center)
# print("Successfully clicked option.png!")

# # Wait a moment for options to load
# time.sleep(2)

# # Click backup_restore.png
# print("Searching for backup_restore.png on screen...")
# backup_restore_location = pyautogui.locateOnScreen('backup_restore.png', confidence=0.8)
# backup_restore_center = pyautogui.center(backup_restore_location)
# print(f"Found backup_restore.png at: {backup_restore_location}")
# print(f"Clicking at center: X: {backup_restore_center.x}, Y: {backup_restore_center.y}")
# pyautogui.click(backup_restore_center)
# print("Successfully clicked backup_restore.png!")

# # Wait a moment for backup/restore options to load
# time.sleep(2)

# # Click restore.png
# print("Searching for restore.png on screen...")
# restore_location = pyautogui.locateOnScreen('restore.png', confidence=0.8)
# restore_center = pyautogui.center(restore_location)
# print(f"Found restore.png at: {restore_location}")
# print(f"Clicking at center: X: {restore_center.x}, Y: {restore_center.y}")
# pyautogui.click(restore_center)
# print("Successfully clicked restore.png!")

# # Wait for restore dialog to load
# time.sleep(2)

# Click change_directory.png
# print("Searching for change_directory.png on screen...")
# change_directory_location = pyautogui.locateOnScreen('change_directory.png', confidence=0.8)
# change_directory_center = pyautogui.center(change_directory_location)
# print(f"Found change_directory.png at: {change_directory_location}")
# print(f"Clicking at center: X: {change_directory_center.x}, Y: {change_directory_center.y}")
# pyautogui.click(change_directory_center)
# print("Successfully clicked change_directory.png!")

# # Wait for directory dialog to load
# time.sleep(1)

# # Type the directory path and press Enter
# print("Typing directory path...")
# pyautogui.write(r'C:\Users\Rdpuser2025\Desktop\whatsapp')
# pyautogui.press('enter')
# print("Directory path entered successfully!")

# # Wait for directory to load
# time.sleep(2)

# # Double click on mumudata.png
# print("Searching for mumudata.png on screen...")
# mumudata_location = pyautogui.locateOnScreen('mumudata.png', confidence=0.8)
# mumudata_center = pyautogui.center(mumudata_location)
# print(f"Found mumudata.png at: {mumudata_location}")
# print(f"Double clicking at center: X: {mumudata_center.x}, Y: {mumudata_center.y}")
# pyautogui.doubleClick(mumudata_center)
# print("Successfully double clicked mumudata.png!")

# Click start_emulator.png
# print("Searching for start_emulator.png on screen...")
# start_emulator = pyautogui.locateOnScreen('start_emulator.png', confidence=0.8)
# start_emulator = pyautogui.center(start_emulator)
# print(f"Found change_directory.png at: {start_emulator}")
# print(f"Clicking at center: X: {start_emulator.x}, Y: {start_emulator.y}")
# pyautogui.click(start_emulator)
# print("Successfully clicked start_emulator.png!")

# Wait 20 seconds for emulator to start
# print("Waiting 20 seconds for emulator to start...")
# time.sleep(20)

# # ADB connection and WhatsApp launch with retry logic
# def connect_and_launch_whatsapp():
#     max_retries = 10
#     retry_delay = 10  # seconds
    
#     for attempt in range(max_retries):
#         print(f"Attempt {attempt + 1}/{max_retries}: Connecting to ADB and launching WhatsApp...")
        
#         try:
#             # Try to connect to ADB and launch WhatsApp
#             result = subprocess.run(
#                 [".\\adb.exe", "shell", "am", "start", "-n", "com.whatsapp/.Main"],
#                 capture_output=True,
#                 text=True,
#                 timeout=30
#             )
            
#             if result.returncode == 0 and "Error" not in result.stdout:
#                 print("✅ Success! WhatsApp is opening and emulator is connected.")
                
#                 # Wait a moment for WhatsApp to load
#                 time.sleep(5)
                
#                 # Look for and click agree.png
#                 print("Searching for agree.png on screen...")
#                 try:
#                     agree_location = pyautogui.locateOnScreen('agree.png', confidence=0.8, minSearchTime=10)
#                     if agree_location:
#                         agree_center = pyautogui.center(agree_location)
#                         print(f"Found agree.png at: {agree_location}")
#                         print(f"Clicking at center: X: {agree_center.x}, Y: {agree_center.y}")
#                         pyautogui.click(agree_center)
#                         print("Successfully clicked agree.png!")
#                         return True
#                     else:
#                         print("❌ agree.png not found on screen")
#                         return False
#                 except pyautogui.ImageNotFoundException:
#                     print("❌ agree.png not found on screen")
#                     return False
                
#             else:
#                 print(f"❌ ADB command failed or refused. Retrying in {retry_delay} seconds...")
#                 print(f"Error output: {result.stderr}")
                
#         except subprocess.TimeoutExpired:
#             print(f"❌ ADB command timed out. Retrying in {retry_delay} seconds...")
#         except Exception as e:
#             print(f"❌ Unexpected error: {e}. Retrying in {retry_delay} seconds...")
        
#         # Wait before retrying
#         if attempt < max_retries - 1:
#             print(f"Waiting {retry_delay} seconds before next attempt...")
#             time.sleep(retry_delay)
    
#     print("❌ Failed to connect after all retry attempts.")
#     return False

# # Execute the ADB connection and WhatsApp launch
# success = connect_and_launch_whatsapp()

# if success:
#     print("All steps completed successfully!")
# else:
#     print("Process failed - could not connect to emulator or launch WhatsApp.")


#Click select_country.png
print("Searching for select_country.png on screen...")
select_country = pyautogui.locateOnScreen('select_country.png', confidence=0.8)
select_country = pyautogui.center(select_country)
print(f"Found select_country.png at: {select_country}")
print(f"Clicking at center: X: {select_country.x}, Y: {select_country.y}")
pyautogui.click(select_country)
print("Successfully clicked select_country.png!")

# Wait for directory dialog to load
time.sleep(5)






#Click search_the_country.png
print("Searching for search_the_country.png on screen...")
search_the_country = pyautogui.locateOnScreen('search_the_country.png', confidence=0.8)
search_the_country = pyautogui.center(search_the_country)
print(f"Found search_the_country.png at: {search_the_country}")
print(f"Clicking at center: X: {search_the_country.x}, Y: {search_the_country.y}")
pyautogui.click(search_the_country)
print("Successfully clicked search_the_country.png!")

# Wait for directory dialog to load
time.sleep(1)



# Configure typing speed (adjust as needed)
typing_delay = 0.1  # seconds between characters
enter_delay = 0.5   # seconds before pressing Enter

try:
    print("Typing country...")
    
    # Type slower for better reliability
    pyautogui.write('Pakistan', interval=typing_delay)
    
    # Brief pause before pressing Enter
    time.sleep(enter_delay)
    
    #pyautogui.press('enter')
    #print("Country name entered successfully!")
    
except Exception as e:
    print(f"Error occurred: {e}")




# Wait for directory dialog to load
time.sleep(1)



#Click confirm_the_country.png
print("Searching for confirm_the_country.png on screen...")
confirm_the_country = pyautogui.locateOnScreen('confirm_the_country.png', confidence=0.8)
confirm_the_country = pyautogui.center(confirm_the_country)
print(f"Found confirm_the_country.png at: {confirm_the_country}")
print(f"Clicking at center: X: {confirm_the_country.x}, Y: {confirm_the_country.y}")
pyautogui.click(confirm_the_country)
print("Successfully clicked confirm_the_country.png!")




i want you to add to the above script for it to type the country name let it download this https://github.com/binahmad362/bookish-octo-couscous/blob/main/rough.txt and check it was formart like below, instead of typing pakistan let it type Senegal because the https://github.com/binahmad362/bookish-octo-couscous/blob/main/rough.txt first line is Senegal and after that let it confirm_the_country by clicking on confirm_the_country.png then from there, let it type the first number which is 221761113595 but let it only type 761113595 remove the contry code which is always the second line, after typing it let it click next.png then wait till either edit.png or not_usable.png if it is edit.png let it click on the edit.png and press backspace key for 5 seconds to delete the first number and type next line number and press next.png if is edit.png appear also click edit.png and press backspace key for five seconds let it continue like unless if it is not_usable.png appear instead of edit.png let it click on register_new_number.png then click on agree.png and then type the next number, if it found not_usable.png let is save the number in a new file in the current directory not_usable.txt if not exist create if exist append the number below the old one in a new line, let it keep doing till it check all the numbers it can be any country number in this example the current  https://github.com/binahmad362/bookish-octo-couscous/blob/main/rough.txt contain senegal numbers, the reason i want to make this script is to extract the not_usable numbers aside in a not_usable.txt file, below is the formar of the https://github.com/binahmad362/bookish-octo-couscous/blob/main/rough.txt contain  :
Senegal
221
221761113595
221769495678
221766074953
221764346601
221766865290
221768070580
221761676850
221763839852
221761178626
221766288423
221767598762
221765653628
221767664973
221766879288
221766050779
....
....
...
and so on
